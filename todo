
bug:
x dropbox can have more than 2 or 3 lines, but I think only the first one matters for us
- polling monitors would be nice if a) we dont fail because on fails and b) it's indicated but keeps running
- idea: if heavy usage, indicate which process name or binary

shorts:
x after restart try bluetooth, not sure if broken or buggy
x replace cpu with cpu and cpu-cores, 2 monitors
x before release, think about all having format member? more uniform? backwards compat?
    x because icons bool is not always clean, but we could have it when you want the default set?
    x call it *icons or *nerdfont?
    x or make constructors .with_icons(bool) or something? can be chained, handles formatters, but you can still do it yourself
    x or not constructor, but just modifier, easy to append after configuration, very backwards-compat too
    x drafts
        x m.Cpu().with_icons(icons: bool) -> self, chainable, but not a new instance currently
        x m.Cpu.with_icons(**args), or name from_icons? an actual "constructor", but where to have icons: bool?
        x but that makes it very verbose if we want it parametrized with icons: bool, in code
        x unless we make the list and then apply on the list? that makes it easier?
    x but what about main formatter?
        x functions can also have .stuff :) would make it feel uniform?
x it will be easier moving forward without the WIP commit, just keep the diff
x update all types to 3.9 format (List to list and stuff)
x use absolute imports, more readable, less problematic
    x I think in main format and output can be imported now? no circular
x monitors as normal, no import magic, best is no subimports anyway
    x check again if we do need the __init__.py anymore
x plus an m.py with convenience stuff
x namespaces are easier than parent modules, plus 'from a import b' is not the same as 'import a.b as b'
    x but then how to define the public interface? a top-level __init__ is quite natural for this
    x does pylint or pyright at least flag things like this?
    x 'import ltstatus; ltstatus.run' and 'import ltstatus.run; ltstatus.run' shadows each other
x make note of what is considered public interface in the readme
    x plus add some release history then
x make the examples exactly mine, so I dont need to keep them separate? just link?

spotify:
x still wrong
x it picks up on non-spotify media updates, like youtube in chrome
x I think it sends updates too often, they are check and suppressed, but still
    x lets only try to send a new state when we have reason to
x we could show progress in song? info should be there, some good nerdfontstuff for it?
    x but first we have ascii, a good one there? because icons=True comes later
    x no so attractive, it would require more timing to keep things updated


using nerdfont icons:
- fontawesome candidates https://fontawesome.com/v6/icons
    - something about pro-level for v5.9 or above
    - 
    - 
    - 
    - 
    - 
    - 
    - 
    - 
- dropbox candidates
    - ﮻ﲏﮛﯩﯯﮫﲊ
    - nice 
- others
    -   ﴮ  
    - ﯀ ﰳ
    - dice = ""
    - dark_numbers = ""  #   or add ﯀ for notification?
    - light_numbers = ""
    - decked_numbers = ""
    -   ﲾ
    - 
- nvidia candidates
    - temps = ""
    - new_use = RatioIndicator(temps).format(compute.gpu / 100)
    - batteries = "!"  #  forgot the empty one here, add fix
    - new_memory = RatioIndicator(batteries).format(memory.used / memory.total)
    - context.send(f"{new_use}{new_memory}")
o see now if colors work? they could also be easy to indicate on/off
    - and of course activity :)
    - it's okay, nicer but dont overuse it
    - how to handle it, global icon switch probably not a good idea
    - just leave all in users control? he can model it in his own config.py?


general:
o still would like to switch top new python
o readme
    - put just a link to the examples
    - and also there as a comment explain how to use it with tmux or dwm
- on ctrl-c or any other kind of exit
    - output should be informed to potentially send empty status?
    - eg, dwm sticks with the last datetime
x make sure exceptions show up in a log file, thru the threading and queues
    x notify works
    - add logging to a file, notify in status with "check ~/.log-ltstatus" or so
    - make sure stdout is clean and only stderr contains noise
- notify user if something hasnt updated in a long time, or mark somehow for now
- debug version output to understand what updated, and why a new line has been printed
    - with color output to indicate?
    - dwm has https://dwm.suckless.org/patches/statuscolors/
- time to setup all those things, especially with vim: pylint, black, isort, configs each of, venv handling
    - have a general template for projects, with a tmux-dev? ./bin ./dev/bin and things like that?
x dwm version uses much cpu!? also dbus heavy
    - i also still see more updates than I would think with dwm setting, make that debug view after all to understand who is aggressive
        - probably some of the still-lazy callback implementations
- add commit hook, for format at least, maybe also for pylint
    - make it happen in setup?
- maybe do make a send update thing that remembers the last content, so that not everybody duplicates that logic
    - this prevents from sending same state
    - but still every monitor should make an effort to not even try to send an update often
- why .xsession log file for status is empty?
- dbus
    o would be nice to handle it a bit more readable
    x I think netflix or other mediaplayer stuff might send "playing" and then the spotify monitor is confused
- have cpu calm monitor also show disk bandwidth in similar manner?
o calm
    - or a "graph like"? to see past, well that's maybe the linuxy (0.4, 0.8, 0.1)?
    - histogram with braille more compact? or with numbers? also rescale to highest probably?
- is readthedocs a good idea? or stick with small readme
    - also make the readme templated to quicker produce the images
    - make it into pypy so people can install pip install ltstatus?
- sometimes nvidia can fail after resume or so, if it failed, we should just retry the context, should work, others maybe the same
